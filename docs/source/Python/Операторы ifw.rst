Операторы if for while
======================

Операторы if for while
Условная инструкция if-elif-else (её ещё иногда называют оператором ветвления) - основной инструмент выбора в Python. Проще говоря, она выбирает, какое действие следует выполнить, в зависимости от значения переменных в момент проверки условия.
Синтаксис инструкции if
Сначала записывается часть if с условным выражением, далее могут следовать одна или более необязательных частей elif, и, наконец, необязательная часть else. Общая форма записи условной инструкции if выглядит следующим образом:
1.  if test1:
2.      state1
3.  elif test2:
4.      state2
5.  else:
6.      state3
Простой пример (напечатает 'true', так как 1 - истина):
1.  >>> if 1:
2.  ... 	print('true')
3.  ... else:
4.  ... 	print('false')
5.  ...
6.  true
Чуть более сложный пример (его результат будет зависеть от того, что ввёл пользователь):
1.  a = int(input())
2.  if a < -5:
3.      print('Low')
4.  elif -5 <= a <= 5:
5.      print('Mid')
6.  else:
7.      print('High')
Конструкция с несколькими elif может также служить отличной заменой конструкции switch - case в других языках программирования.
Проверка истинности в Python
●  	Любое число, не равное 0, или непустой объект - истина.
●  	Числа, равные 0, пустые объекты и значение None - ложь
●  	Операции сравнения применяются к структурам данных рекурсивно
●  	Операции сравнения возвращают True или False
●  	Логические операторы and и or возвращают истинный или ложный объект-операнд
Логические операторы:
1.  X and Y
Истина, если оба значения X и Y истинны.
1.  X or Y
Истина, если хотя бы одно из значений X или Y истинно.
1.  not X
Истина, если X ложно
Трехместное выражение if/else
Следующая инструкция:
1.  if X:
2.      A = Y
3.  else:
4.      A = Z
довольно короткая, но, тем не менее, занимает целых 4 строки. Специально для таких случаев и было придумано выражение if/else:
1.  A = Y if X else Z
В данной инструкции интерпретатор выполнит выражение Y, если X истинно, в противном случае выполнится выражение Z.
1.  >>> 
2.  >>> A = 't' if 'spam' else 'f'
3.  >>> A
4.  't'
В этой статье я расскажу о циклах for и while, операторах break и continue, а также о слове else, которое, будучи употребленное с циклом, может сделать программный код несколько более понятным.
Цикл while
While - один из самых универсальных циклов в Python, поэтому довольно медленный. Выполняет тело цикла до тех пор, пока условие цикла истинно.
1.  >>> 
2.  >>> i = 5
3.  >>> while i < 15:
4.  ...	print(i)
5.  ...	i = i + 2
6.  ...
7.  5
8.  7
9.  9
10.11
11.13
Цикл for
Цикл for уже чуточку сложнее, чуть менее универсальный, но выполняется гораздо быстрее цикла while. Этот цикл проходится по любому итерируемому объекту (например строке или списку), и во время каждого прохода выполняет тело цикла.
1.  >>> 
2.  >>> for i in 'hello world':
3.  ...	print(i * 2, end='')
4.  ...
5.  hheelllloo  wwoorrlldd
Оператор continue
Оператор continue начинает следующий проход цикла, минуя оставшееся тело цикла (for или while)
1.  >>> 
2.  >>> for i in 'hello world':
3.  ...	if i == 'o':
4.  ...        continue
5.  ...	print(i * 2, end='')
6.  ...
7.  hheellll  wwrrlldd
Оператор break
Оператор break досрочно прерывает цикл.
1.  >>> 
2.  >>> for i in 'hello world':
3.  ...	if i == 'o':
4.  ...        break
5.  ...	print(i * 2, end='')
6.  ...
7.  hheellll
Волшебное слово else
Слово else, примененное в цикле for или while, проверяет, был ли произведен выход из цикла инструкцией break, или же "естественным" образом. Блок инструкций внутри else выполнится только в том случае, если выход из цикла произошел без помощи break.
1.  >>> 
2.  >>> for i in 'hello world':
3.  ...	if i == 'a':
4.  ...        break
5.  ... else:
6.  ...	print('Буквы a в строке нет')
7.  ...
Буквы a в строке нет
